plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "6.1.0"
}


group 'io.github.earthchen'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter" }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

def conditionDependencies = [
        "org.apache.flink:flink-table:${flinkVersion}",
        "org.apache.flink:flink-table-api-java:${flinkVersion}",
        "org.apache.flink:flink-table-api-java-bridge_${scalaBinaryVersion}:${flinkVersion}",
//        "org.apache.flink:flink-streaming-scala_${scalaBinaryVersion}:${flinkVersion}",
        "org.apache.flink:flink-table-planner-blink_${scalaBinaryVersion}:${flinkVersion}",
        "org.apache.flink:flink-table-planner_${scalaBinaryVersion}:${flinkVersion}",
        "org.apache.flink:flink-clients_${scalaBinaryVersion}:${flinkVersion}",
//        "ch.qos.logback:logback-core:1.2.3",
//        "ch.qos.logback:logback-classic:1.2.3"
]

def prod = System.getProperty("prod") ?: false;

dependencies {
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.19'
// https://mvnrepository.com/artifact/org.apache.flink/flink-connector-jdbc
    implementation group: 'org.apache.flink', name: 'flink-connector-jdbc_2.11', version: '1.12.0'
// https://mvnrepository.com/artifact/org.apache.flink/flink-sql-connector-kafka
    implementation group: 'org.apache.flink', name: 'flink-sql-connector-kafka_2.11', version: '1.12.0'
    // https://mvnrepository.com/artifact/org.apache.flink/flink-connector-kafka
    implementation group: 'org.apache.flink', name: 'flink-connector-kafka_2.11', version: '1.12.0'

// https://mvnrepository.com/artifact/org.apache.flink/flink-csv
    implementation group: 'org.apache.flink', name: 'flink-json', version: '1.12.0'
    print("----当前prod=${prod}-------")
    if (prod) {
        compileOnly(conditionDependencies)
    } else {
        implementation(conditionDependencies)
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation("org.hamcrest:hamcrest-all:1.3")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "io.github.earthchen.json.KafkaJsonMain"
    }
}

configurations.compile.dependencies.remove dependencies.gradleApi()

shadowJar {
    mergeServiceFiles()
}


